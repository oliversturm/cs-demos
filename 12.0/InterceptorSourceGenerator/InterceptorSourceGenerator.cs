using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;


namespace InterceptorSourceGenerator;

[Generator]
public class InterceptorSourceGenerator : IIncrementalGenerator {
  public void Initialize(IncrementalGeneratorInitializationContext context) {
    var provider = context.SyntaxProvider
      .CreateSyntaxProvider(
        (s, _) => s is InvocationExpressionSyntax {
          Expression: MemberAccessExpressionSyntax {
            Name.Identifier.Text: "WriteLine",
            Expression: IdentifierNameSyntax {
              Identifier.Text: "Console"
            }
          }
        },
        (ctx, _) => GetSourceLocation(ctx));

    context.RegisterSourceOutput(context.CompilationProvider.Combine(provider.Collect()), GenerateCode);
  }

  private static (string filePath, int line, int col)? GetSourceLocation(GeneratorSyntaxContext context) {
    if (context.Node is InvocationExpressionSyntax {
          Expression: MemberAccessExpressionSyntax {
          Name.Identifier: SyntaxToken st
        } }) {
      //Location x = st.GetLocation();
var lineSpan = context.Node.SyntaxTree.GetLineSpan(st.Span);
      //var lineSpan = mae.GetLocation().GetLineSpan();
//      var lineSpan = context.Node.SyntaxTree.GetLineSpan(mae.Span);
      return (lineSpan.Path, lineSpan.StartLinePosition.Line, lineSpan.StartLinePosition.Character);
    }
    else return null;
  }

  private void GenerateCode(SourceProductionContext ctx,
    (Compilation compilation, ImmutableArray<(string filePath, int line, int col)?> locations) details) {
    var attributeLines =
      String.Join("\n",
        details.locations.Select(
          l => $"[InterceptsLocation(\"{l?.filePath}\", line: {l?.line + 1}, column: {l?.col + 1})]"));

    var code = $$"""
                 // <auto-generated/>
                 
                 using System; // v4
                 
                 namespace InterceptorSourceGenerator;
                 
                 [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                 file sealed class InterceptsLocationAttribute(string filePath, int line, int column) : Attribute
                 {}
                 
                 public static class Interceptors {
                   {{attributeLines }}
                   public static void InterceptorMethod(string format, params object?[]? arg) {
                     Console.WriteLine("Intercepted!");   
                   }
                 }
                 """;
    ctx.AddSource("WriteLineInterceptor.g.cs", SourceText.From(code, Encoding.UTF8));
  }
}