using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;


namespace InterceptorSourceGenerator;

[Generator]
public class InterceptorSourceGenerator : IIncrementalGenerator {
  public void Initialize(IncrementalGeneratorInitializationContext context) {
    var provider = context.SyntaxProvider
      .CreateSyntaxProvider(
        // (s, _) => s is InvocationExpressionSyntax ie && ie.Expression is MemberAccessExpressionSyntax ma &&
        //           ma.Name.Identifier.Text == "WriteLine" && ma.Expression is IdentifierNameSyntax ins &&
        //           ins.Identifier.Text == "Console",
        // Nice example here for the use of a complex pattern
        (s, _) => s is InvocationExpressionSyntax {
          Expression: MemberAccessExpressionSyntax {
            Name.Identifier.Text: "WriteLine",
            Expression: IdentifierNameSyntax {
              Identifier.Text: "Console"
            }
          }
        },
        (ctx, _) => GetSourceLocation(ctx));

    context.RegisterSourceOutput(context.CompilationProvider.Combine(provider.Collect()), GenerateCode);
  }

  private static (string filePath, int line, int col)? GetSourceLocation(GeneratorSyntaxContext context) {
    // Pattern matching, one more time, while extracting a variable
    // in the middle of the pattern
    if (context.Node is InvocationExpressionSyntax {
          Expression: MemberAccessExpressionSyntax {
            Name.Identifier: SyntaxToken st
          }
        }) {
      var lineSpan = context.Node.SyntaxTree.GetLineSpan(st.Span);
      return (lineSpan.Path, lineSpan.StartLinePosition.Line + 1, lineSpan.StartLinePosition.Character + 1);
    }
    else return null;
  }

  private void GenerateCode(SourceProductionContext ctx,
    (Compilation compilation, ImmutableArray<(string filePath, int line, int col)?> locations) details) {
    var attributeLines =
      String.Join("\n    ",
        details.locations.Select(
          l => $"[InterceptsLocation(@\"{l?.filePath}\", line: {l?.line}, column: {l?.col})]"));

    var code = $$"""
                 // <auto-generated/>

                 using System;

                 namespace System.Runtime.CompilerServices {
                   [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                   file sealed class InterceptsLocationAttribute(string filePath, int line, int column) : Attribute
                   {}
                 }
                 
                 namespace InterceptorSourceGenerator {
                   using System.Runtime.CompilerServices;
                   file static class Interceptors {
                     {{attributeLines}}
                     internal static void InterceptorMethod(string? output) {
                       Console.WriteLine($"Intercepted! (Original output: {output})");
                     }
                   }
                 }
                 """;
    ctx.AddSource("WriteLineInterceptor.g.cs", SourceText.From(code, Encoding.UTF8));
  }
}